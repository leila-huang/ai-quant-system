[build-system]
requires = ["setuptools>=45", "wheel", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-quant-system"
version = "0.1.0"
description = "AI量化交易系统 - P1级核心业务逻辑"
readme = "README.md"
authors = [{name = "AI Development Team", email = "dev@aiquant.com"}]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.9"
dependencies = [
    # P0级基础设施依赖
    "fastapi[standard]>=0.115.0",
    "akshare>=1.15.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "psycopg2-binary>=2.9.0",
    "SQLAlchemy>=2.0.0",
    "pyarrow>=12.0.0",
    "redis>=5.0.0",
    # P1级核心业务逻辑依赖
    "vectorbt>=0.25.0",          # 高性能向量化回测引擎
    "xgboost>=2.0.0",            # 梯度提升机器学习框架
    "scikit-learn>=1.3.0",       # 机器学习工具包
    "ta-lib>=0.4.0",             # 技术指标计算库
    "numba>=0.58.0",             # JIT编译加速数值计算
    "matplotlib>=3.7.0",         # 数据可视化（用于回测报告）
    "seaborn>=0.12.0",           # 统计数据可视化
    "joblib>=1.3.0",             # 并行计算和模型持久化
]

[project.optional-dependencies]
dev = [
    # 测试框架
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    # 代码质量工具
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    # P1级开发工具
    "jupyter>=1.0.0",             # Jupyter Notebook
    "jupyterlab>=4.0.0",          # JupyterLab环境
    "ipython>=8.0.0",             # 增强的Python交互式解释器
    "notebook>=7.0.0",            # Notebook服务器
    "plotly>=5.17.0",             # 交互式图表（用于分析和报告）
    "dash>=2.14.0",               # 构建分析仪表盘
    "streamlit>=1.28.0",          # 快速构建数据应用
    "memory_profiler>=0.61.0",    # 内存使用分析
    "line_profiler>=4.0.0",       # 代码性能分析
]

# Black 代码格式化配置
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort 导入排序配置
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["backend/src", "backend/app", "tests"]

# MyPy 类型检查配置
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    # P0级基础依赖
    "akshare.*",
    "pandas.*",
    "numpy.*",
    "pyarrow.*",
    "redis.*",
    "psycopg2.*",
    # P1级新增依赖
    "vectorbt.*",
    "xgboost.*",
    "sklearn.*",
    "talib.*",
    "numba.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "joblib.*",
]
ignore_missing_imports = true

# Pytest 配置
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]

# Coverage 配置
[tool.coverage.run]
source = ["backend/src", "backend/app"]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/scripts/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
